// Generated by CoffeeScript 1.6.3
var PiwikClient, querystring, urltool;

urltool = require('url');

querystring = require('querystring');

PiwikClient = (function() {
  function PiwikClient(baseURL, token) {
    var url, _ref, _ref1;
    url = urltool.parse(baseURL, true);
    this.settings = {};
    switch (url.protocol) {
      case 'http:':
        this.http = require('http');
        ((_ref = this.settings.apiport) != null ? _ref : url.port) || 80;
        break;
      case 'https:':
        this.http = require('https');
        ((_ref1 = this.settings.apiport) != null ? _ref1 : url.port) || 443;
    }
    if (url.query && url.query.token_auth) {
      this.settings.token = url.query.token_auth;
    }
    if (token) {
      this.settings.token = token;
    }
    this.settings.apihost = url.hostname;
    this.settings.apipath = url.pathname;
  }

  PiwikClient.prototype.api = function(vars, cb) {
    if (typeof vars !== 'object') {
      vars = {};
    }
    vars.module = 'API';
    vars.format = 'JSON';
    if (vars.token_auth == null) {
      vars.token_auth = this.settings.token;
    }
    return this.http.get({
      host: this.settings.apihost,
      port: this.settings.apiport,
      path: this.settings.apipath + '?' + querystring.stringify(vars)
    }, function(response) {
      var data;
      data = '';
      response.on('data', function(chunk) {
        return data += chunk;
      });
      return response.on('end', function() {
        var error, resObj;
        try {
          resObj = JSON.parse(data);
          if (resObj.result === 'error') {
            return cb(resObj.message, null);
          }
          return cb(null, resObj);
        } catch (_error) {
          error = _error;
          return cb(error.message, null);
        }
      });
    });
  };

  return PiwikClient;

})();

module.exports = PiwikClient;
